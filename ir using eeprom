#include <EEPROM.h>
#include <IRremote.h>

int RECV_PIN = 12;                                 // Tsop reciever pin
int led=13;                                        // LED indication pin
int light= 2;                                      // Pin for Light
int fan= 3;                                        // Pin for Fan
int tactile= 5;                                    // Pin for Tactile button
long int IR_light_on = 1025;                       // predefined IR value for lights ON
long int IR_light_off = 1026;                      // predefined IR value for lights off
long int IR_fan_on = 1027;                         // predefined IR value for fan on
long int IR_fan_off = 1028;                        // predefined IR value for fan off
long int IR_on = 1029;                             // predefined IR value for all ON
long int IR_off = 1030;                            // predefined IR value for all OFF

IRrecv irrecv(RECV_PIN);
decode_results results;


void setup()
{
  pinMode(light,OUTPUT);
  pinMode(fan,OUTPUT);
  pinMode(led,OUTPUT);
  pinMode(tactile,INPUT);
  Serial.begin(9600);
  irrecv.enableIRIn();                              // Start the receiver
}



void loop() 
{
  long int a,b,c,d,e,f;
  a= EEPROMReadlong(0);                             // Stores the light IR value for ON                            
  b= EEPROMReadlong(100);                           // Stores the light IR value for OFF
  c= EEPROMReadlong(200);                           // Stores the fan IR value for ON
  d= EEPROMReadlong(300);                           // Stores the fan IR value for OFF
  e= EEPROMReadlong(400);                           // Stores the IR value for all ON
  f= EEPROMReadlong(500);                           // Stores the IR value for all OFF
  
  if(digitalRead(tactile)==HIGH)
    { 
      writeval1();                                  // Function writes the light IR value for ON in EEPROM 
      irrecv.resume();                              // Recieve next IR value
      writeval2();                                  // Function writes the light IR value for OFF in EEPROM
      irrecv.resume();                              // Recieve next IR value
      writeval3();                                  // Function writes the fan IR value for ON in EEPROM
      irrecv.resume();                              // Recieve next IR value
      writeval4();                                  // Function writes the fan IR value for ON in EEPROM
      irrecv.resume();                              // Receive the next IR value
      writeval5();                                  // Function writes the all appliance IR value for ON in EEPROM
      irrecv.resume();                              // Receive the next IR value
      writeval6();                                  // Function writes the all appliance IR value for OFF in EEPROM
      irrecv.resume();
      
      for(int i=0;i<10;i++)                         /* After writing, the loop indicates that 
                                                      all the values has been written. The LED
                                                       blinks at a delay of 100 miliseconds */
        {
          digitalWrite(led,HIGH);
          delay(100);
          digitalWrite(led,LOW);
          delay(100);
          
        }
    } 

  if (irrecv.decode(&results))                        /* Have we recieved an IR signal??...
                                                        If Yes, then enter the loop */   
   {
    long int p=results.value;
    
    if(p<0)                                           // If the IR value is negative, convert it to positive
    {
      p = p*(-1);
    }

    else                                              // If the signal is positive, enter the nested condition
    {
      if (p==IR_light_on||p==a)
      {
        digitalWrite(light,HIGH);
      }
      else if (p==IR_light_off||p==b)
      {
        digitalWrite(light,LOW);
      }
      else if (p==IR_fan_on||p==c)
      {
        digitalWrite(fan,HIGH);
      }
      else if (p==IR_fan_off||p==d)
      {
        digitalWrite(fan,LOW);
      }
      else if (p==IR_on||p==e)
      {
        digitalWrite(light,HIGH);
        digitalWrite(fan,HIGH);
      }
      else if (p==IR_off||p==f)
      {
        digitalWrite(light,LOW);
        digitalWrite(fan,LOW);
      }     
    }
    irrecv.resume();                                     // Receive the next value
    delay(100);
   }
}





void writeval1()
{ Serial.println(" I am in write mode ");
  long int x=0;
  int i;

    digitalWrite(led,HIGH);
    delay(700);
    digitalWrite(led,LOW);
    delay(700);
    for(i=0;i<3;i++)
      {
        digitalWrite(led,HIGH);
        delay(700);
        digitalWrite(led,LOW);
        delay(700);
      }

  digitalWrite(led,HIGH);  
  while(x==0)
  {
   if(irrecv.decode(&results))
    { 
      x = results.value; 
        if(x<0)
        {
          x = x*(-1);
        }
      irrecv.resume();
    }  
   delay(50);
  }
  Serial.print(" PUT = ");
  Serial.println(x);
  EEPROMWritelong(0,x);
  Serial.println(" Writing 1st value done ");
  digitalWrite(led,LOW); 
  delay(1500);

}


void writeval2()
{
  long int x=0;
  digitalWrite(led,HIGH);  
  while(x==0)
  {
   if(irrecv.decode(&results))
    { 
      x = results.value; 
        if(x<0)
        {
          x = x*(-1);
        }
      irrecv.resume();
    }  
   delay(50);
  }
  Serial.print(" PUT = ");
  Serial.println(x);
  EEPROMWritelong(100,x);
  Serial.println(" Writing 2nd value done ");
  digitalWrite(led,LOW); 
  delay(1500);
  
}


void writeval3()
{
  long int x=0;
  digitalWrite(led,HIGH);  
  while(x==0)
  {
   if(irrecv.decode(&results))
    { 
      x = results.value; 
        if(x<0)
        {
          x = x*(-1);
        }
      irrecv.resume();
    }  
   delay(50);
  }
  Serial.print(" PUT = ");
  Serial.println(x);
  EEPROMWritelong(200,x);
  Serial.println(" Writing 3rd value done ");
  digitalWrite(led,LOW); 
  delay(1500);
  
}


void writeval4()
{
  long int x=0;
  digitalWrite(led,HIGH);  
  while(x==0)
  {
   if(irrecv.decode(&results))
    { 
      x = results.value; 
        if(x<0)
        {
          x = x*(-1);
        }
      irrecv.resume();
    }  
   delay(50);
  }
  Serial.print(" PUT = ");
  Serial.println(x);
  EEPROMWritelong(300,x);
  Serial.println(" Writing 4th value done ");
  digitalWrite(led,LOW); 
  delay(1500);
  
}


void writeval5()
{
  long int x=0;
  digitalWrite(led,HIGH);  
  while(x==0)
  {
   if(irrecv.decode(&results))
    { 
      x = results.value; 
        if(x<0)
        {
          x = x*(-1);
        }
      irrecv.resume();
    }  
   delay(50);
  }
  Serial.print(" PUT = ");
  Serial.println(x);
  EEPROMWritelong(400,x);
  Serial.println(" Writing 5th value done ");
  digitalWrite(led,LOW); 
  delay(1500);
  
}


void writeval6()
{
  long int x=0;
  digitalWrite(led,HIGH);  
  while(x==0)
  {
   if(irrecv.decode(&results))
    { 
      x = results.value; 
        if(x<0)
        {
          x = x*(-1);
        }
      irrecv.resume();
    }  
   delay(50);
  }
  Serial.print(" PUT = ");
  Serial.println(x);
  EEPROMWritelong(500,x);
  Serial.println(" Writing 6th value done ");
  digitalWrite(led,LOW); 
  delay(1500);
  
}



void EEPROMWritelong(int address, long value)
      {
      //Decomposition from a long to 4 bytes by using bitshift.
      //One = Most significant -> Four = Least significant byte
      byte four = (value & 0xFF);
      byte three = ((value >> 8) & 0xFF);
      byte two = ((value >> 16) & 0xFF);
      byte one = ((value >> 24) & 0xFF);

      //Write the 4 bytes into the eeprom memory.
      EEPROM.write(address, four);
      EEPROM.write(address + 1, three);
      EEPROM.write(address + 2, two);
      EEPROM.write(address + 3, one);
      }      





long EEPROMReadlong(int address)
      {
      //Read the 4 bytes from the eeprom memory.
      long four = EEPROM.read(address);
      long three = EEPROM.read(address + 1);
      long two = EEPROM.read(address + 2);
      long one = EEPROM.read(address + 3);

      //Return the recomposed long by using bitshift.
      return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
      }
